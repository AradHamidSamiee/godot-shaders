[gd_scene load_steps=16 format=2]

[ext_resource path="res://Common/Demo3DEnvironment.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/HexagonGrid.png" type="Texture" id=2]
[ext_resource path="res://Demos/ForceField/ForceField.gd" type="Script" id=3]
[ext_resource path="res://Demos/ForceField/ForceFieldEmitter.gd" type="Script" id=4]

[sub_resource type="BoxShape" id=12]
extents = Vector3( 3, 0.125, 1.5 )

[sub_resource type="CubeMesh" id=4]
size = Vector3( 6, 0.25, 3 )

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 0.623529, 0.643137, 0.670588, 1 )

[sub_resource type="PhysicsMaterial" id=13]
friction = 120.0
rough = true
bounce = 0.25

[sub_resource type="SphereShape" id=6]
radius = 0.05

[sub_resource type="SphereMesh" id=7]

[sub_resource type="SpatialMaterial" id=8]
albedo_color = Color( 0.270588, 0.278431, 0.337255, 1 )

[sub_resource type="SphereMesh" id=9]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, unshaded, blend_add;

uniform vec4 color : hint_color;
uniform float fill_amount : hint_range(0, 1) = 0.1;
uniform float fresnel_power = 1.0;

uniform float pattern_scroll_speed = 0.025;
uniform vec2 pattern_uv_offset = vec2(6.0, 3.0);

uniform sampler2D pattern_texture : hint_albedo;

void fragment() {
	//Create a fresnel effect from the NORMAL and VIEW vectors.
	float fresnel = pow(clamp(1.0 - dot(NORMAL, VIEW), 0, 1), fresnel_power);
	
	//Get the raw linear depth from the depth texture into a  [-1, 1] range
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r * 2.0 - 1.0;
	//Recreate linear depth of the intersecting geometry using projection matrix, and subtract the vertex of the sphere
	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]) + VERTEX.z;
	//Intensity intersection effect
	depth = pow(1.0 - clamp(depth, 0, 1), fresnel_power);
	
	//Make sure that back facing fragments are not totally invisible
	fresnel = fresnel * float(FRONT_FACING) * 2.0 + (fill_amount / 2.0);
	
	//Calculate final alpha using fresnel and depth joined together
	fresnel = fresnel + depth;
	
	//Calculate UV scrolling pattern
	float scrolling_time = TIME * pattern_scroll_speed;
	vec4 pattern = texture(pattern_texture, (UV * pattern_uv_offset) + vec2(scrolling_time));
	
	//Use pattern to cut holes in alpha
	fresnel *= pattern.r;
	
	//Apply final color
	ALBEDO = color.rgb + vec3((fresnel + depth) * 0.25);
	ALPHA = smoothstep(0.0, 1.0, fresnel + (fill_amount / 2.0));
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 3 )
shader_param/color = Color( 1.31765, 0.76633, 0.121569, 1 )
shader_param/fill_amount = 0.05
shader_param/fresnel_power = 12.828
shader_param/pattern_scroll_speed = 0.05
shader_param/pattern_uv_offset = Vector2( 6, 3 )
shader_param/pattern_texture = ExtResource( 2 )

[sub_resource type="BoxShape" id=11]
extents = Vector3( 100, 0.1, 100 )

[node name="ForceFieldDemo" type="Spatial"]

[node name="WallBody" type="StaticBody" parent="."]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 1.5, 0 )

[node name="CollisionShape" type="CollisionShape" parent="WallBody"]
shape = SubResource( 12 )

[node name="Wall" type="MeshInstance" parent="WallBody"]
mesh = SubResource( 4 )
material/0 = SubResource( 5 )

[node name="Demo3DEnvironment" parent="." instance=ExtResource( 1 )]

[node name="Sun" parent="Demo3DEnvironment" index="1"]
light_energy = 0.4

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.918571, -0.125535, 0.374792, 0, 0.948224, 0.317603, -0.395257, -0.29174, 0.871011, 1.63275, 1.38087, 3.55278 )

[node name="RigidBody" type="RigidBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.539, 1.064, 3.841 )
physics_material_override = SubResource( 13 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
axis_lock_angular_x = true
axis_lock_angular_y = true
axis_lock_angular_z = true
script = ExtResource( 4 )

[node name="CollisionShape" type="CollisionShape" parent="RigidBody"]
shape = SubResource( 6 )

[node name="MeshInstance" type="MeshInstance" parent="RigidBody"]
transform = Transform( 0.05, 0, 0, 0, 0.05, 0, 0, 0, 0.05, 0, 0, 0 )
mesh = SubResource( 7 )
material/0 = SubResource( 8 )

[node name="ForceField" type="MeshInstance" parent="RigidBody"]
transform = Transform( 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0 )
visible = false
mesh = SubResource( 9 )
material/0 = SubResource( 10 )
script = ExtResource( 3 )

[node name="OmniLight" type="OmniLight" parent="RigidBody/ForceField"]
light_color = Color( 0.878431, 0.490196, 0.14902, 1 )
omni_range = 2.2

[node name="Tween" type="Tween" parent="RigidBody/ForceField"]

[node name="FloorBody" type="StaticBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.1, 0 )

[node name="CollisionShape" type="CollisionShape" parent="FloorBody"]
shape = SubResource( 11 )
[connection signal="body_entered" from="RigidBody" to="RigidBody/ForceField" method="_on_RigidBody_body_entered"]

[editable path="Demo3DEnvironment"]
